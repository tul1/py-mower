; [bumpversion]
; current_version = 0.1.0
; commit = True
; tag = True
; parse = (?P<major>\d+)\.(?P<minor>\d+)\.(?P<patch>\d+)(\.dev(?P<dev>\d+))?
; serialize = 
;     {major}.{minor}.{patch}.dev{dev}
;     {major}.{minor}.{patch}

; [bumpversion:file:VERSION]

; [bumpversion:file:pyproject.toml]

; [tox]
; envlist = py
; isolated_build = True

; [pycodestyle]
; max-line-length = 150

; ; [pytest]
; ; addopts = -v
; ;     --cov=mower
; ;     --cov-branch
; ;     --cov-report xml:coverge.xml
; ;     --cov-report html:html_report/coverge.html
; ;     --junitxml report.xml
; ;     --cov-config .coveragerc
; ; markers =
; ;     e2e_tests: mark a test as a end to end test.
; ;     unit_tests: mark a test as a unit test.

; [testenv]
; skipsdist = true
; skip_install = true
; whitelist_externals = poetry
; commands =
;     poetry install -v
;     poetry run pycodestyle --ignore E501 --show-pep8 mower tests
;     poetry run mypy mower --ignore-missing-imports
;     poetry run pytest -m unit_tests
;     poetry run pytest -m e2e_tests
; setenv = 
;     LANG=en_US.UTF-8
;     LANGUAGE=en_US:en
;     LC_ALL=en_US.UTF-8

; [testenv:bandit]
; whitelist_externals = bandit
; deps = bandit>=1.7.0
; commands = bandit -r mower -f json -o bandit-report.json

; [testenv:safety]
; whitelist_externals = 
;     poetry
;     safety
;     git
;     rm
; commands =
;     poetry install -v
;     poetry run pip install safety
;     rm -rf safety-db
;     poetry run safety check

; [flake8]
; show-source = True
; exclude = .git/,config/,migrations/
; ignore = F401
; max-line-length = 100

; [run]
; branch = True

; [path]
; source =
;     mower/

; [report]
; exclude_lines =
;     pragma: no cover

;     def __repr__
;     if self\.debug

;     raise AssertionError
;     raise NotImplementedError

;     if 0:
;     if __name__: .__main__.:

;     show_missing = True
; ignore_errors = True

; [html]
; directory = coverage_html_report